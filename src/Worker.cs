using System.Collections.Concurrent;
using System.Text;
using Microsoft.Extensions.Options;
using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace TelegramBot;

public class Worker(
    ILogger<Worker> _logger,
    IOptionsMonitor<AppOptions> _appOptions,
    CheckHandler _checkHandler) : BackgroundService
{
    private readonly ConcurrentDictionary<long, Mode> _modeCache = new();

    private readonly string _startMessage = new StringBuilder()
        .AppendLine(@"<b>üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ <a href=""https://ru.wikipedia.org/wiki/–•—É–≥–∏–Ω_–∏_–ú—É–Ω–∏–Ω"">Hugin & Munin Bot</a>.</b>")
        .AppendLine()
        .AppendLine("–û–Ω –º–Ω–æ–≥–æ–µ –∑–Ω–∞–µ—Ç –æ–± IT-–∫–æ–º–ø–∞–Ω–∏—è—Ö:")
        .AppendLine()
        .AppendLine("üí∞ –ó–∞—Ä–ø–ª–∞—Ç—ã")
        .AppendLine("üó£Ô∏è –û—Ç–∑—ã–≤—ã")
        .AppendLine("‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        .AppendLine("üìà –§–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        .AppendLine()
        .AppendLine("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ /mode, –Ω–∞–ø–∏—à–∏ <code>/check –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏</code>, –∏ —è –ø–æ–∫–∞–∂—É —á—Ç–æ –∑–Ω–∞—é.")
        .AppendLine()
        .AppendLine("–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, –Ω–∞–ø–∏—à–∏ /help.")
        .AppendFooter()
        .ToString();

    private readonly string _helpMessage = new StringBuilder()
        .AppendLine("<b>Hugin & Munin Bot.</b>")
        .AppendLine()
        .AppendLine("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        .AppendLine()
        .AppendLine("/mode - –í—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º.")
        .AppendLine("/check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –ø–æ –ò–ù–ù.")
        .AppendLine("/help - –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É.")
        .AppendFooter()
        .ToString();

    private readonly string _selectModeMessage = new StringBuilder()
        .AppendLine("<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º</b>")
        .AppendLine()
        .AppendLine("–ß—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∂–∏–º–æ–≤:")
        .ToString();

    private readonly string _errorMessage = new StringBuilder()
        .AppendLine("<b>ü™≤ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫</b>")
        .AppendLine()
        .AppendLine("–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É.")
        .AppendFooter()
        .ToString();

    protected override async Task ExecuteAsync(CancellationToken ct)
    {
        var client = new TelegramBotClient(_appOptions.CurrentValue.TelegramToken);

        var commands = new BotCommand[]
        {
            new () { Command = "start", Description = "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º" },
            new () { Command = "mode", Description = "–í—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º" },
            new () { Command = "help", Description = "–ü–æ–º–æ—â—å" },
            new () { Command = "check", Description = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –ø–æ –ò–ù–ù" }
        };

        await client.SetMyCommandsAsync(commands, cancellationToken: ct);

        _logger.LogInformation("Telegram Bot message handler started");

        await client.ReceiveAsync(
            HandleUpdate,
            HandleError,
            receiverOptions: new ReceiverOptions()
            {
                AllowedUpdates = []
            },
            cancellationToken: ct);
    }

    private Task HandleUpdate(
        ITelegramBotClient client,
        Update update,
        CancellationToken ct) => update switch
        {
            { CallbackQuery: not null } x => HandleCallback(client, x.CallbackQuery, ct),
            { Message: not null } x => HandleMessage(client, x.Message, ct),
            _ => Task.CompletedTask
        };

    private async Task HandleCallback(
        ITelegramBotClient client,
        CallbackQuery callbackQuery,
        CancellationToken ct)
    {
        await client.EditMessageReplyMarkupAsync(
            callbackQuery.Message!.Chat.Id,
            callbackQuery.Message.MessageId,
            cancellationToken: ct);

        HandleCallback(callbackQuery.From.Id, callbackQuery.Data!);
    }

    private void HandleCallback(long userId, string callbackData)
    {
        var span = callbackData.AsSpan();

        if (span.StartsWith("mode-general")) _modeCache.TryAdd(userId, Mode.General);
        else if (span.StartsWith("mode-legalinfo")) _modeCache.TryAdd(userId, Mode.LegalInfo);
        else if (span.StartsWith("mode-reviews")) _modeCache.TryAdd(userId, Mode.Reviews);
        else if (span.StartsWith("mode-salaries")) _modeCache.TryAdd(userId, Mode.Salaries);
    }

    private Task HandleExtendedLegalEntities(
        ITelegramBotClient client,
        long tin,
        CancellationToken ct)
    {
        return Task.CompletedTask;
    }

    private Task HandleMessage(
        ITelegramBotClient client,
        Message message,
        CancellationToken ct)
    {
        var (command, commandText, chatId) = message.ParseTelegramCommand();

        if (command == TelegramCommands.Unknown) return Task.CompletedTask;

        return command switch
        {
            TelegramCommands.Start => StartHandle(client, chatId, ct),
            TelegramCommands.Mode => HandleSelectMode(client, chatId, ct),
            TelegramCommands.Help => HelpHandle(client, chatId, ct),
            TelegramCommands.Check => CheckHandler(client, message.From!.Id, chatId, commandText, ct),
            _ => Task.CompletedTask
        };
    }

    private Task<Message> StartHandle(
        ITelegramBotClient client,
        long chatId,
        CancellationToken ct) =>
            client.SendTextMessageAsync(
                chatId,
                _startMessage,
                disableWebPagePreview: true,
                parseMode: ParseMode.Html,
                cancellationToken: ct);

    private Task<Message> HelpHandle(
        ITelegramBotClient client,
        long chatId,
        CancellationToken ct) =>
            client.SendTextMessageAsync(
                chatId,
                _helpMessage,
                disableWebPagePreview: true,
                parseMode: ParseMode.Html,
                cancellationToken: ct);

    private async Task CheckHandler(
        ITelegramBotClient client,
        long chatId,
        long userId,
        string commandText,
        CancellationToken ct)
    {
        // First of all, the user has to select mode
        if (!_modeCache.TryGetValue(userId, out var mode))
        {
            await HandleSelectMode(client, chatId, ct);
            return;
        }

        // Handle invalid TINs
        if (!TelegramHelper.TryGetTin(commandText, out var tin))
        {
            await client.SendTextMessageAsync(
                chatId,
                $"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ò–ù–ù",
                cancellationToken: ct);
            return;
        }

        var task = mode switch
        {
            Mode.General => HandleGeneral(client, chatId, tin, ct),
            Mode.LegalInfo => HandleLegalInfo(client, chatId, tin, ct),
            Mode.Reviews => Task.CompletedTask,
            _ => throw new NotSupportedException()
        };

        await task;
    }

    private async Task HandleSelectMode(
        ITelegramBotClient client,
        long chatId,
        CancellationToken ct)
    {
        var buttons = new[]
        {
            InlineKeyboardButton.WithCallbackData("‚ÑπÔ∏è O–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", $"mode-general"),
            InlineKeyboardButton.WithCallbackData("‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", $"mode-legalinfo"),
            InlineKeyboardButton.WithCallbackData("üó£Ô∏è –û—Ç–∑—ã–≤—ã (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", $"mode-reviews"),
            InlineKeyboardButton.WithCallbackData("üí∞ –ó–∞—Ä–ø–ª–∞—Ç—ã (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", $"mode-salaries"),
        };

        var replyMarkup = new InlineKeyboardMarkup(buttons.Chunk(1));

        await client.SendTextMessageAsync(
            chatId,
            _selectModeMessage,
            disableWebPagePreview: true,
            parseMode: ParseMode.Html,
            replyMarkup: replyMarkup,
            cancellationToken: ct);
    }

    private async Task HandleGeneral(
        ITelegramBotClient client,
        long chatId,
        long tin,
        CancellationToken ct)
    {
        StringBuilder? report;

        try
        {
            report = await _checkHandler.Handle(tin, ct);
        }
        catch (Exception e)
        {
            await HandleError(client, chatId, e, ct);
            return;
        }

        if (report == default)
        {
            await client.SendTextMessageAsync(
                chatId,
                $"–ö–æ–º–ø–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º –ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                cancellationToken: ct);
            return;
        }

        await client.SendTextMessageAsync(
            chatId,
            report.AppendFooter().ToString(),
            disableWebPagePreview: true,
            parseMode: ParseMode.Html,
            cancellationToken: ct);
    }

    private async Task HandleLegalInfo(
        ITelegramBotClient client,
        long chatId,
        long tin,
        CancellationToken ct)
    {
        var report = await _checkHandler.Handle(tin, ct);

        if (report == default)
        {
            await client.SendTextMessageAsync(
                chatId,
                $"–ö–æ–º–ø–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º –ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                cancellationToken: ct);
            return;
        }

        await client.SendTextMessageAsync(
            chatId,
            report.AppendFooter().ToString(),
            disableWebPagePreview: true,
            parseMode: ParseMode.Html,
            cancellationToken: ct);
    }

    private async Task HandleError(
        ITelegramBotClient client,
        Exception exception,
        CancellationToken ct)
    {
        _logger.LogError(exception, "Unhandled exception");
        await Task.CompletedTask;
        throw exception;
    }

    private async Task HandleError(
        ITelegramBotClient client,
        long chatId,
        Exception exception,
        CancellationToken ct)
    {
        _logger.LogError(exception, "Unhandled exception");

        await client.SendTextMessageAsync(
            chatId,
            _errorMessage,
            disableWebPagePreview: true,
            parseMode: ParseMode.Html,
            cancellationToken: ct);

        await Task.CompletedTask;
        throw exception;
    }

    enum Mode
    {
        General = 0,
        LegalInfo = 1,
        Reviews = 2,
        Salaries = 3
    }
}
